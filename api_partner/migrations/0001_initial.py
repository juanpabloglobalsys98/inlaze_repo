# Generated by Django 3.2.12 on 2022-06-25 15:19

import api_partner.models.authentication.document_company
import api_partner.models.authentication.document_partner
import api_partner.models.authentication.validation_code
import api_partner.models.authentication.validation_code_register
import api_partner.models.payment_management.own_company
import api_partner.models.reports_management.bookmaker
import core.helpers.s3_config
import django.core.files.storage
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('core', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='BanUnbanCodeReason',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('reason', models.TextField()),
                ('is_ban_reason', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Ban unban code reason',
                'verbose_name_plural': 'Ban unban code reasons',
            },
        ),
        migrations.CreateModel(
            name='Bookmaker',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True, verbose_name='Bookmaker name')),
                ('image', models.FileField(storage=django.core.files.storage.FileSystemStorage, upload_to=api_partner.models.reports_management.bookmaker.Bookmaker.file_upload_image)),
            ],
            options={
                'verbose_name': 'Bookmaker',
                'verbose_name_plural': 'Bookmakers',
            },
        ),
        migrations.CreateModel(
            name='Campaign',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=70)),
                ('deposit_condition', models.FloatField(default=0)),
                ('stake_condition', models.FloatField(default=0)),
                ('lose_condition', models.FloatField(default=0)),
                ('deposit_condition_campaign_only', models.FloatField(default=0)),
                ('stake_condition_campaign_only', models.FloatField(default=0)),
                ('lose_condition_campaign_only', models.FloatField(default=0)),
                ('currency_condition_campaign_only', models.CharField(max_length=3)),
                ('currency_condition', models.CharField(max_length=3)),
                ('countries', models.CharField(max_length=200)),
                ('fixed_income_unitary', models.FloatField(default=0)),
                ('currency_fixed_income', models.CharField(max_length=3)),
                ('status', models.IntegerField(default=1)),
                ('default_percentage', models.FloatField(default=0.75)),
                ('temperature', models.FloatField(default=1.0)),
                ('tracker', models.FloatField(default=1.0)),
                ('tracker_deposit', models.FloatField(default=1.0)),
                ('tracker_registered_count', models.FloatField(default=1.0)),
                ('tracker_first_deposit_count', models.FloatField(default=1.0)),
                ('tracker_wagering_count', models.FloatField(default=1.0)),
                ('last_inactive_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('fixed_income_updated_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('cpa_limit', models.IntegerField(default=None, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('bookmaker', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='campaign_to_bookmaker', to='api_partner.bookmaker')),
            ],
            options={
                'verbose_name': 'Campaign',
                'verbose_name_plural': 'Campaigns',
            },
        ),
        migrations.CreateModel(
            name='FxPartner',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fx_eur_cop', models.FloatField(default=0)),
                ('fx_eur_mxn', models.FloatField(default=0)),
                ('fx_eur_usd', models.FloatField(default=0)),
                ('fx_eur_brl', models.FloatField(default=0)),
                ('fx_eur_pen', models.FloatField(default=0)),
                ('fx_eur_gbp', models.FloatField(default=0)),
                ('fx_eur_clp', models.FloatField(default=0)),
                ('fx_usd_cop', models.FloatField(default=0)),
                ('fx_usd_mxn', models.FloatField(default=0)),
                ('fx_usd_eur', models.FloatField(default=0)),
                ('fx_usd_brl', models.FloatField(default=0)),
                ('fx_usd_pen', models.FloatField(default=0)),
                ('fx_usd_gbp', models.FloatField(default=0)),
                ('fx_usd_clp', models.FloatField(default=0)),
                ('fx_cop_usd', models.FloatField(default=0)),
                ('fx_cop_mxn', models.FloatField(default=0)),
                ('fx_cop_eur', models.FloatField(default=0)),
                ('fx_cop_brl', models.FloatField(default=0)),
                ('fx_cop_pen', models.FloatField(default=0)),
                ('fx_cop_gbp', models.FloatField(default=0)),
                ('fx_cop_clp', models.FloatField(default=0)),
                ('fx_mxn_usd', models.FloatField(default=0)),
                ('fx_mxn_cop', models.FloatField(default=0)),
                ('fx_mxn_eur', models.FloatField(default=0)),
                ('fx_mxn_brl', models.FloatField(default=0)),
                ('fx_mxn_pen', models.FloatField(default=0)),
                ('fx_mxn_gbp', models.FloatField(default=0)),
                ('fx_mxn_clp', models.FloatField(default=0)),
                ('fx_gbp_usd', models.FloatField(default=0)),
                ('fx_gbp_cop', models.FloatField(default=0)),
                ('fx_gbp_mxn', models.FloatField(default=0)),
                ('fx_gbp_eur', models.FloatField(default=0)),
                ('fx_gbp_brl', models.FloatField(default=0)),
                ('fx_gbp_pen', models.FloatField(default=0)),
                ('fx_gbp_clp', models.FloatField(default=0)),
                ('fx_pen_usd', models.FloatField(default=0)),
                ('fx_pen_cop', models.FloatField(default=0)),
                ('fx_pen_mxn', models.FloatField(default=0)),
                ('fx_pen_eur', models.FloatField(default=0)),
                ('fx_pen_brl', models.FloatField(default=0)),
                ('fx_pen_gbp', models.FloatField(default=0)),
                ('fx_pen_clp', models.FloatField(default=0)),
                ('fx_clp_usd', models.FloatField(default=0)),
                ('fx_clp_cop', models.FloatField(default=0)),
                ('fx_clp_mxn', models.FloatField(default=0)),
                ('fx_clp_eur', models.FloatField(default=0)),
                ('fx_clp_brl', models.FloatField(default=0)),
                ('fx_clp_gbp', models.FloatField(default=0)),
                ('fx_clp_pen', models.FloatField(default=0)),
                ('fx_percentage', models.FloatField(default=0.95)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'Fx Partner',
                'verbose_name_plural': 'Fx Partners',
            },
        ),
        migrations.CreateModel(
            name='FxPartnerPercentage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('percentage_fx', models.FloatField(default=0.95)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='InactiveActiveCodeReason',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('reason', models.TextField()),
                ('is_active_reason', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Inactive Active Code Reason',
                'verbose_name_plural': 'Inactive Active Codes Reasons',
            },
        ),
        migrations.CreateModel(
            name='Link',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('prom_code', models.CharField(max_length=50)),
                ('url', models.URLField(unique=True)),
                ('status', models.IntegerField(default=1)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('campaign', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='link_to_campaign', to='api_partner.campaign')),
            ],
            options={
                'verbose_name': 'Link',
                'verbose_name_plural': 'Links',
            },
        ),
        migrations.CreateModel(
            name='MinWithdrawalPartnerMoney',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('min_cop', models.FloatField()),
                ('min_mxn', models.FloatField()),
                ('min_usd', models.FloatField()),
                ('min_eur', models.FloatField()),
                ('min_pen', models.FloatField()),
                ('min_brl', models.FloatField()),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Min Withdrawal Partner Money',
                'verbose_name_plural': 'Min Withdrawals partner Money',
            },
        ),
        migrations.CreateModel(
            name='OwnCompany',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('logo', models.FileField(default=None, null=True, storage=django.core.files.storage.FileSystemStorage, upload_to=api_partner.models.payment_management.own_company.OwnCompany.file_upload)),
                ('name', models.CharField(default=None, max_length=255, null=True)),
                ('nit', models.CharField(default=None, max_length=255, null=True)),
                ('city', models.CharField(default=None, max_length=255, null=True)),
                ('address', models.CharField(default=None, max_length=255, null=True)),
                ('phone', models.CharField(default=None, max_length=50, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'Own company',
                'verbose_name_plural': 'Own companies',
            },
        ),
        migrations.CreateModel(
            name='Partner',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='core.user')),
                ('adviser_id', models.BigIntegerField(default=None, null=True)),
                ('fixed_income_adviser_percentage', models.FloatField(default=None, null=True)),
                ('net_revenue_adviser_percentage', models.FloatField(default=None, null=True)),
                ('is_enterprise', models.BooleanField(default=False)),
                ('was_linked', models.BooleanField(default=False)),
                ('agreement', models.BooleanField(default=True)),
                ('status', models.SmallIntegerField(default=0)),
                ('basic_info_status', models.SmallIntegerField(default=4)),
                ('bank_status', models.SmallIntegerField(default=4)),
                ('documents_status', models.SmallIntegerField(default=4)),
                ('full_registered_at', models.DateTimeField(default=None, null=True)),
            ],
            options={
                'verbose_name': 'Partner',
                'verbose_name_plural': 'Partners',
            },
        ),
        migrations.CreateModel(
            name='PartnerLinkAccumulated',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('prom_code', models.CharField(max_length=50)),
                ('is_assigned', models.BooleanField(default=True)),
                ('cpa_count', models.IntegerField(default=0)),
                ('fixed_income', models.FloatField(default=0)),
                ('currency_fixed_income', models.CharField(max_length=3)),
                ('fixed_income_local', models.FloatField(default=0)),
                ('currency_local', models.CharField(max_length=3)),
                ('percentage_cpa', models.FloatField(default=0.75)),
                ('tracker', models.FloatField(default=1.0)),
                ('tracker_deposit', models.FloatField(default=1.0)),
                ('tracker_registered_count', models.FloatField(default=1.0)),
                ('tracker_first_deposit_count', models.FloatField(default=1.0)),
                ('tracker_wagering_count', models.FloatField(default=1.0)),
                ('assigned_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('campaign', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='partnerlinkaccumulated_to_campaign', to='api_partner.campaign')),
                ('partner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='partnerlinkaccumulated_to_partner', to='api_partner.partner')),
            ],
            options={
                'verbose_name': 'Partner link accumulated',
                'verbose_name_plural': 'Partner links accumulated',
                'unique_together': {('partner', 'campaign')},
            },
        ),
        migrations.CreateModel(
            name='QuestionCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200, unique=True)),
                ('icon', models.SmallIntegerField()),
                ('is_active', models.BooleanField(default=True)),
            ],
            options={
                'verbose_name': 'Question answer',
                'verbose_name_plural': 'Questions answers',
            },
        ),
        migrations.CreateModel(
            name='ValidationCodeRegister',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=32)),
                ('email', models.EmailField(max_length=250, unique=True)),
                ('password', models.CharField(max_length=128)),
                ('phone', models.CharField(max_length=50)),
                ('adviser_id', models.BigIntegerField(null=True)),
                ('expiration', models.DateTimeField(default=api_partner.models.authentication.validation_code_register.ValidationCodeRegister.get_current_expiration)),
                ('attempts', models.SmallIntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'Validation code register',
                'verbose_name_plural': 'Validation code registers',
            },
        ),
        migrations.CreateModel(
            name='WithdrawalPartnerMoney',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(blank=True, max_length=150)),
                ('second_name', models.CharField(blank=True, max_length=150)),
                ('last_name', models.CharField(blank=True, max_length=150)),
                ('second_last_name', models.CharField(blank=True, max_length=150)),
                ('email', models.EmailField(max_length=254)),
                ('phone', models.CharField(default=None, max_length=50, null=True)),
                ('country', models.CharField(max_length=3)),
                ('city', models.CharField(max_length=50)),
                ('address', models.CharField(max_length=255)),
                ('identification', models.CharField(default=True, max_length=60, null=True)),
                ('identification_type', models.IntegerField(default=True, null=True)),
                ('billed_from_at', models.DateField(default=django.utils.timezone.now)),
                ('billed_to_at', models.DateField(default=django.utils.timezone.now)),
                ('cpa_count', models.IntegerField(default=0)),
                ('fixed_income_usd', models.FloatField(default=0)),
                ('fixed_income_eur', models.FloatField(default=0)),
                ('fixed_income_eur_usd', models.FloatField(default=0)),
                ('fixed_income_cop', models.FloatField(default=0)),
                ('fixed_income_cop_usd', models.FloatField(default=0)),
                ('fixed_income_mxn', models.FloatField(default=0)),
                ('fixed_income_mxn_usd', models.FloatField(default=0)),
                ('fixed_income_gbp', models.FloatField(default=0)),
                ('fixed_income_gbp_usd', models.FloatField(default=0)),
                ('fixed_income_pen', models.FloatField(default=0)),
                ('fixed_income_pen_usd', models.FloatField(default=0)),
                ('fixed_income_local', models.FloatField(default=0)),
                ('bill_rate', models.FloatField(default=0)),
                ('currency_local', models.CharField(max_length=3)),
                ('status', models.IntegerField(default=0)),
                ('payment_at', models.DateTimeField(default=None, null=True)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('own_company', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='WithdrawalPartner_to_ownCompany', to='api_partner.owncompany')),
                ('partner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='withdrawal_partner_money_accum_set', to='api_partner.partner')),
            ],
            options={
                'verbose_name': 'Withdrawal Partner',
                'verbose_name_plural': 'Withdrawals partner',
            },
        ),
        migrations.CreateModel(
            name='BetenlaceCPA',
            fields=[
                ('link', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='api_partner.link')),
                ('deposit', models.FloatField(default=0)),
                ('stake', models.FloatField(default=0)),
                ('currency_condition', models.CharField(max_length=3)),
                ('fixed_income', models.FloatField(default=0)),
                ('net_revenue', models.FloatField(default=0)),
                ('revenue_share', models.FloatField(default=0)),
                ('currency_fixed_income', models.CharField(max_length=3)),
                ('registered_count', models.IntegerField(default=0)),
                ('cpa_count', models.IntegerField(default=0)),
                ('first_deposit_count', models.IntegerField(default=0)),
                ('wagering_count', models.IntegerField(default=0)),
                ('updated_at', models.DateField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Betenlace CPA',
                'verbose_name_plural': 'Betenlace CPAS',
            },
        ),
        migrations.CreateModel(
            name='Company',
            fields=[
                ('partner', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='api_partner.partner')),
                ('company_id', models.CharField(max_length=100)),
                ('social_reason', models.CharField(max_length=255)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Company',
                'verbose_name_plural': 'Companies',
                'unique_together': {('company_id', 'social_reason')},
            },
        ),
        migrations.CreateModel(
            name='DocumentPartner',
            fields=[
                ('partner', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='documents_partner', serialize=False, to='api_partner.partner')),
                ('bank_certification_file', models.FileField(default=None, null=True, storage=core.helpers.s3_config.S3StandardIA, upload_to=api_partner.models.authentication.document_partner.DocumentPartner.file_upload_bank_certification_file)),
                ('identification_file', models.FileField(default=None, null=True, storage=core.helpers.s3_config.S3StandardIA, upload_to=api_partner.models.authentication.document_partner.DocumentPartner.file_upload_identification_file)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Document partner',
                'verbose_name_plural': 'Document partners',
            },
        ),
        migrations.CreateModel(
            name='WithdrawalPartnerMoneyAccum',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cpa_count', models.IntegerField()),
                ('accum_at', models.DateField(default=django.utils.timezone.now)),
                ('fixed_income_usd', models.FloatField(default=0)),
                ('fixed_income_eur', models.FloatField(default=0)),
                ('fixed_income_eur_usd', models.FloatField(default=0)),
                ('fixed_income_cop', models.FloatField(default=0)),
                ('fixed_income_cop_usd', models.FloatField(default=0)),
                ('fixed_income_mxn', models.FloatField(default=0)),
                ('fixed_income_mxn_usd', models.FloatField(default=0)),
                ('fixed_income_gbp', models.FloatField(default=0)),
                ('fixed_income_gbp_usd', models.FloatField(default=0)),
                ('fixed_income_pen', models.FloatField(default=0)),
                ('fixed_income_pen_usd', models.FloatField(default=0)),
                ('fx_percentage', models.FloatField(default=1.0)),
                ('fixed_income_local', models.FloatField()),
                ('currency_local', models.CharField(max_length=3)),
                ('fx_partner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='fxpartner', to='api_partner.fxpartner')),
                ('withdrawal_partner_money', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='withdrawal_partner_money_accum_set', to='api_partner.withdrawalpartnermoney')),
            ],
            options={
                'verbose_name': 'Withdrawal Partner Accum',
                'verbose_name_plural': 'Withdrawals partner Accum',
            },
        ),
        migrations.CreateModel(
            name='ValidationCode',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('code', models.CharField(max_length=32)),
                ('expiration', models.DateTimeField(default=api_partner.models.authentication.validation_code.ValidationCode.get_current_expiration)),
                ('attempts', models.SmallIntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'Validation code',
                'verbose_name_plural': 'Validation codes',
                'unique_together': {('email', 'code')},
            },
        ),
        migrations.CreateModel(
            name='RegistrationFeedbackDocuments',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('adviser_id', models.BigIntegerField(null=True)),
                ('error_fields', models.CharField(max_length=250)),
                ('description', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('partner', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='api_partner.partner')),
            ],
            options={
                'verbose_name': 'Registration Feedback Documents',
                'verbose_name_plural': 'Registrations Feedback Document',
            },
        ),
        migrations.CreateModel(
            name='RegistrationFeedbackBasicInfo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('adviser_id', models.BigIntegerField(null=True)),
                ('error_fields', models.CharField(max_length=250)),
                ('description', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('partner', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='api_partner.partner')),
            ],
            options={
                'verbose_name': 'Registration Feedback Basic Info',
                'verbose_name_plural': 'Registrations Feedback Basic Info',
            },
        ),
        migrations.CreateModel(
            name='RegistrationFeedbackBank',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('adviser_id', models.BigIntegerField(null=True)),
                ('error_fields', models.CharField(max_length=250)),
                ('description', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('partner', models.OneToOneField(null=True, on_delete=django.db.models.deletion.SET_NULL, to='api_partner.partner')),
            ],
            options={
                'verbose_name': 'Registration Feedback Bank',
                'verbose_name_plural': 'Registrations Feedback Bank',
            },
        ),
        migrations.CreateModel(
            name='Question',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.CharField(max_length=200)),
                ('answer', models.TextField(blank=True)),
                ('is_active', models.BooleanField(default=True)),
                ('is_common', models.BooleanField(default=False)),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='question', to='api_partner.questioncategory')),
            ],
            options={
                'verbose_name': 'Question answer',
                'verbose_name_plural': 'Questions answers',
                'unique_together': {('category', 'description')},
            },
        ),
        migrations.CreateModel(
            name='PartnerFeedback',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('calification', models.FloatField()),
                ('feedback', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('partner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api_partner.partner')),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api_partner.question')),
            ],
            options={
                'verbose_name': 'Partner feedback',
                'verbose_name_plural': 'Partner feedbacks',
            },
        ),
        migrations.AddField(
            model_name='link',
            name='partner_link_accumulated',
            field=models.OneToOneField(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='link_to_partner_link_accumulated', to='api_partner.partnerlinkaccumulated'),
        ),
        migrations.CreateModel(
            name='InactiveHistory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('adviser_id', models.BigIntegerField(default=None, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('active_inactive_code_reason', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api_partner.inactiveactivecodereason')),
                ('partner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api_partner.partner')),
            ],
            options={
                'verbose_name': 'Inactive History',
                'verbose_name_plural': 'Inactive Histories',
            },
        ),
        migrations.CreateModel(
            name='ClickTracking',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ip', models.CharField(default=None, max_length=63, null=True)),
                ('registry', models.CharField(default=None, max_length=254, null=True)),
                ('countrycode', models.CharField(default=None, max_length=3, null=True)),
                ('countryname', models.CharField(default=None, max_length=127, null=True)),
                ('asn_code', models.CharField(default=None, max_length=254, null=True)),
                ('asn_name', models.CharField(default=None, max_length=254, null=True)),
                ('asn_route', models.CharField(default=None, max_length=254, null=True)),
                ('asn_start', models.CharField(default=None, max_length=254, null=True)),
                ('asn_end', models.CharField(default=None, max_length=254, null=True)),
                ('asn_count', models.CharField(default=None, max_length=254, null=True)),
                ('city', models.CharField(default=None, max_length=254, null=True)),
                ('spam', models.BooleanField(default=None, null=True)),
                ('tor', models.BooleanField(default=None, null=True)),
                ('count', models.IntegerField(default=1)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('link', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ClickTracking_to_link', to='api_partner.link')),
                ('partner_link_accumulated', models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='ClickTracking_to_partnerLinkAccumulated', to='api_partner.partnerlinkaccumulated')),
            ],
            options={
                'verbose_name': 'Click tracking',
                'verbose_name_plural': 'Clicks tracking',
            },
        ),
        migrations.CreateModel(
            name='BetenlaceDailyReport',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('currency_condition', models.CharField(max_length=3)),
                ('deposit', models.FloatField(default=None, null=True)),
                ('stake', models.FloatField(default=None, null=True)),
                ('net_revenue', models.FloatField(default=None, null=True)),
                ('revenue_share', models.FloatField(default=None, null=True)),
                ('currency_fixed_income', models.CharField(max_length=3)),
                ('fixed_income', models.FloatField(default=None, null=True)),
                ('fixed_income_unitary', models.FloatField(default=None, null=True)),
                ('click_count', models.IntegerField(default=None, null=True)),
                ('registered_count', models.IntegerField(default=None, null=True)),
                ('cpa_count', models.IntegerField(default=None, null=True)),
                ('first_deposit_count', models.IntegerField(default=None, null=True)),
                ('wagering_count', models.IntegerField(default=None, null=True)),
                ('created_at', models.DateField(default=django.utils.timezone.now)),
                ('fx_partner', models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, to='api_partner.fxpartner')),
                ('betenlace_cpa', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='Betenlacedailyreport_to_BetenlaceCPA', to='api_partner.betenlacecpa')),
            ],
            options={
                'verbose_name': 'Betenlace daily report',
                'verbose_name_plural': 'Betenlace daily reports',
                'unique_together': {('betenlace_cpa', 'created_at')},
            },
        ),
        migrations.CreateModel(
            name='BanUnbanReason',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('adviser_id', models.BigIntegerField()),
                ('created_at', models.DateTimeField(auto_now=True)),
                ('ban_unban_code_reason', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api_partner.banunbancodereason')),
                ('partner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api_partner.partner')),
            ],
            options={
                'verbose_name': 'Ban unban reason',
                'verbose_name_plural': 'Ban unban reasons',
            },
        ),
        migrations.CreateModel(
            name='DocumentCompany',
            fields=[
                ('company', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='documents_company', serialize=False, to='api_partner.company')),
                ('rut_file', models.FileField(default=None, null=True, storage=core.helpers.s3_config.S3StandardIA, upload_to=api_partner.models.authentication.document_company.DocumentCompany.file_upload_rut)),
                ('exist_legal_repr_file', models.FileField(default=None, null=True, storage=core.helpers.s3_config.S3StandardIA, upload_to=api_partner.models.authentication.document_company.DocumentCompany.file_upload_exist_legal_repr)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Document company',
                'verbose_name_plural': 'Document companies',
            },
        ),
        migrations.CreateModel(
            name='PartnerLinkDailyReport',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fixed_income', models.FloatField(default=None, null=True)),
                ('fixed_income_unitary', models.FloatField(default=None, null=True)),
                ('currency_fixed_income', models.CharField(max_length=3)),
                ('currency_local', models.CharField(max_length=3)),
                ('fx_book_local', models.FloatField(default=None, null=True)),
                ('fx_book_net_revenue_local', models.FloatField(default=None, null=True)),
                ('fx_percentage', models.FloatField(default=None, null=True)),
                ('fixed_income_local', models.FloatField(default=None, null=True)),
                ('fixed_income_unitary_local', models.FloatField(default=None, null=True)),
                ('cpa_count', models.IntegerField(default=None, null=True)),
                ('percentage_cpa', models.FloatField(default=None, null=True)),
                ('deposit', models.FloatField(default=None, null=True)),
                ('registered_count', models.IntegerField(default=None, null=True)),
                ('first_deposit_count', models.IntegerField(default=None, null=True)),
                ('wagering_count', models.IntegerField(default=None, null=True)),
                ('tracker', models.FloatField(default=None, null=True)),
                ('tracker_deposit', models.FloatField(default=None, null=True)),
                ('tracker_registered_count', models.FloatField(default=None, null=True)),
                ('tracker_first_deposit_count', models.FloatField(default=None, null=True)),
                ('tracker_wagering_count', models.FloatField(default=None, null=True)),
                ('adviser_id', models.BigIntegerField(default=None, null=True)),
                ('fixed_income_adviser', models.FloatField(default=None, null=True)),
                ('fixed_income_adviser_local', models.FloatField(default=None, null=True)),
                ('net_revenue_adviser', models.FloatField(default=None, null=True)),
                ('net_revenue_adviser_local', models.FloatField(default=None, null=True)),
                ('fixed_income_adviser_percentage', models.FloatField(default=None, null=True)),
                ('net_revenue_adviser_percentage', models.FloatField(default=None, null=True)),
                ('created_at', models.DateField(default=django.utils.timezone.now)),
                ('betenlace_daily_report', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='api_partner.betenlacedailyreport')),
                ('partner_link_accumulated', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='Partnerlinkdailyreport_to_partnerlinkaccumulated', to='api_partner.partnerlinkaccumulated')),
            ],
            options={
                'verbose_name': 'Partner link daily report',
                'verbose_name_plural': 'Partner link daily reports',
                'unique_together': {('partner_link_accumulated', 'created_at')},
            },
        ),
        migrations.AlterUniqueTogether(
            name='link',
            unique_together={('campaign', 'prom_code')},
        ),
        migrations.CreateModel(
            name='BankAccount',
            fields=[
                ('partner', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='api_partner.partner')),
                ('bank_name', models.CharField(default=None, max_length=150, null=True)),
                ('account_number', models.CharField(default=None, max_length=100, null=True)),
                ('account_type', models.SmallIntegerField(default=None, null=True)),
                ('swift_code', models.CharField(default=None, max_length=100, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Bank account',
                'verbose_name_plural': 'Bank accounts',
                'unique_together': {('account_number', 'account_type', 'swift_code')},
            },
        ),
        migrations.CreateModel(
            name='AdditionalInfo',
            fields=[
                ('partner', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='api_partner.partner')),
                ('person_type', models.SmallIntegerField()),
                ('identification', models.CharField(default=None, max_length=60, null=True)),
                ('identification_type', models.SmallIntegerField(default=None, null=True)),
                ('country', models.CharField(max_length=3)),
                ('city', models.CharField(max_length=100)),
                ('fiscal_address', models.CharField(max_length=255)),
                ('channel_name', models.CharField(max_length=200)),
                ('channel_url', models.URLField(unique=True)),
                ('channel_type', models.IntegerField()),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Additional information',
                'verbose_name_plural': 'Additional informations',
                'unique_together': {('identification', 'identification_type')},
            },
        ),
        migrations.CreateModel(
            name='AccountReport',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('punter_id', models.CharField(max_length=50)),
                ('deposit', models.FloatField(default=0)),
                ('stake', models.FloatField(default=0)),
                ('currency_condition', models.CharField(max_length=3)),
                ('fixed_income', models.FloatField(default=0)),
                ('net_revenue', models.FloatField(default=0)),
                ('revenue_share', models.FloatField(default=0)),
                ('currency_fixed_income', models.CharField(max_length=3)),
                ('cpa_betenlace', models.IntegerField(default=0)),
                ('cpa_partner', models.IntegerField(default=0)),
                ('cpa_at', models.DateField(default=None, null=True)),
                ('registered_at', models.DateField(default=None, null=True)),
                ('first_deposit_at', models.DateField(default=None, null=True)),
                ('created_at', models.DateField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('link', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='accountreport_to_link', to='api_partner.link')),
                ('partner_link_accumulated', models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='accountreport_to_partner_link_accumulated', to='api_partner.partnerlinkaccumulated')),
            ],
            options={
                'verbose_name': 'Account report',
                'verbose_name_plural': 'Account reports',
                'unique_together': {('link', 'punter_id')},
            },
        ),
    ]
