"""
Django settings for betenlace project.

Generated by 'django-admin startproject' using Django 3.2.4.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""
import os
from pathlib import Path
import re

import dj_database_url
from django.utils.translation import gettext_lazy as _
from dotenv import (
    find_dotenv,
    load_dotenv,
)

# Build paths inside the project like this: BASE_DIR / "subdir".
BASE_DIR = Path(__file__).resolve().parent.parent.parent

# urls temp file
# URLS_CUSTOM_APPS_FILE_PATH = os.path.join(BASE_DIR, "betenlace/.urls")

# Load enviroment vars for configuration values on file that will not
# pushed to repository
load_dotenv(find_dotenv(filename=os.path.join(BASE_DIR, ".env")))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# SECRET_KEY = ''

SECRET_KEY = os.getenv('DJANGO_SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = eval(os.getenv("DEBUG", "True"))

URLS_CUSTOM_APPS_FILE_PATH = os.path.join(BASE_DIR, "betenlace/.urls")  # Only custom command

# This is a custom var for handle specific api run
INSTALLED_CUSTOM_APPS = os.getenv("INSTALLED_CUSTOM_APPS").split(",")[:-1]

INSTALLED_APPS = [
    # Django apps
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.messages',
    'django.contrib.postgres',

    # Django rest apps
    'rest_framework',
    'rest_framework.authtoken',

    # Celery
    'django_celery_beat',
    'django_celery_results',

    # Third-party apps
    'corsheaders',
    'django_seed',
    # 'storages',

    # Local apps
    *INSTALLED_CUSTOM_APPS,
    'core',
]

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'core.helpers.auth_backend.BackTokenAuthentication',
    ],
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination',
    'DEFAULT_PARSER_CLASSES': [
        'rest_framework.parsers.JSONParser',
        'rest_framework.parsers.FormParser',
        'rest_framework.parsers.MultiPartParser',
    ],
    'DEFAULT_RENDERER_CLASSES': (
        'rest_framework.renderers.JSONRenderer',
    ),
}

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    "corsheaders.middleware.CorsMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "core.helpers.manage_locale.ManageLocaleMiddleware",
    "core.helpers.path_route_db.CsrfViewRouteMiddleware",
]

CORS_ORIGIN_ALLOW_ALL = eval(os.getenv("CORS_ORIGIN_ALLOW_ALL", "True"))
CORS_ALLOW_CREDENTIALS = eval(os.getenv("CORS_ALLOW_CREDENTIALS", "True"))

CORS_ALLOW_METHODS = [
    "DELETE",
    "GET",
    "OPTIONS",
    "PATCH",
    "POST",
    "PUT",
]

CORS_ALLOW_HEADERS = [
    "accept-encoding",
    "content-type",
    "authorization",
    "app-language",
    "Range",
    "Page"
]

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            os.path.join(BASE_DIR, 'templates')
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'betenlace.wsgi.application'

DATABASES = {}
DATABASES["default"] = dj_database_url.config(
    default=os.getenv("DATABASE_URL_DEFAULT"), conn_max_age=600)
DATABASES["admin"] = dj_database_url.config(
    default=os.getenv("DATABASE_URL_ADMIN"), conn_max_age=600)
DATABASES["history"] = dj_database_url.config(
    default=os.getenv("DATABASE_URL_HISTORY"), conn_max_age=600)


DATABASE_ROUTERS = [
    "api_admin.helpers.routers_db.AdminRouter",
    "api_log.helpers.routers_db.HistoryRouter",
    "api_partner.helpers.routers_db.DefaultRouter",
]

# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'core.helpers.validator_rules.password_requirements.PasswordRequirementsValidator',
    },
]

# AUTHENTICATION_BACKENDS = ['django.contrib.auth.backends.ModelBackend']
AUTHENTICATION_BACKENDS = ['core.helpers.auth_backend.AuthBackend']


# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = "America/Bogota"

USE_I18N = True

USE_L10N = True

USE_TZ = True

LOCALE_PATHS = (
    os.path.join(BASE_DIR, 'locale'), )

LANGUAGES = [
    ('es', _('Spanish')),
    ('en', _('English')),
    ('pt', _('Portuguese'))
]

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

USE_S3 = eval(os.getenv('USE_S3', "False"))

if USE_S3:
    # aws settings
    AWS_ACCESS_KEY_ID = os.getenv('AWS_ACCESS_KEY_ID')
    AWS_SECRET_ACCESS_KEY = os.getenv('AWS_SECRET_ACCESS_KEY')
    AWS_STORAGE_BUCKET_NAME = os.getenv('AWS_STORAGE_BUCKET_NAME')
    AWS_S3_SIGNATURE_VERSION = 's3v4'
    AWS_S3_FILE_OVERWRITE = False
    AWS_DEFAULT_ACL = None
    AWS_S3_VERIFY = True
    # AWS_S3_SESSION_PROFILE = os.getenv('AWS_S3_SESSION_PROFILE')
    DEFAULT_FILE_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'
    # aws backup settings
    AWS_BACKUP_KEY_ID = os.getenv('AWS_BACKUP_KEY_ID')
    AWS_BACKUP_BUCKET_NAME = os.getenv('AWS_BACKUP_BUCKET_NAME')
    AWS_SECRET_BACKUP_KEY = os.getenv('AWS_SECRET_BACKUP_KEY')
    AWS_BACKUP_BUCKET_PATH = os.getenv('AWS_BACKUP_BUCKET_PATH')
    BACKUP_PATH = os.getenv('BACKUP_PATH')


MEDIA_URL = "media/"
MEDIA_ROOT = "media"

FILE_UPLOAD_HANDLERS = [
    'django.core.files.uploadhandler.MemoryFileUploadHandler',
]
FILE_UPLOAD_MAX_MEMORY_SIZE = 2621440 * 2


# Auth user model ONLY for django admins
AUTH_USER_MODEL = "core.User"

# People who get code error notifications.
# In the format [('Full Name', 'email@example.com'), ('Full Name', 'anotheremail@example.com')]
ADMINS = eval(os.getenv("ADMINS", "[]"))
# Email address that error messages come from.
SERVER_EMAIL = os.getenv("SERVER_EMAIL", 'root@localhost')

# Host for sending email.
EMAIL_HOST = os.getenv("EMAIL_HOST", 'localhost')
# Port for sending email.
EMAIL_PORT = int(os.getenv("EMAIL_PORT", 25))

# Whether to send SMTP 'Date' header in the local time zone or in UTC.
EMAIL_USE_LOCALTIME = eval(os.getenv("EMAIL_USE_LOCALTIME", 'True'))

# SMTP Mail service with decouple
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST_USER = os.getenv('EMAIL_HOST_USER', '')
EMAIL_HOST_PASSWORD = os.getenv('EMAIL_HOST_PASSWORD', '')
EMAIL_USE_TLS = eval(os.getenv("EMAIL_USE_TLS", "False"))
EMAIL_USE_SSL = eval(os.getenv("EMAIL_USE_SSL", "False"))
EMAIL_SSL_CERTFILE = os.getenv("EMAIL_USE_SSL", None)
EMAIL_SSL_KEYFILE = os.getenv("EMAIL_SSL_KEYFILE", None)
EMAIL_TIMEOUT = os.getenv("EMAIL_TIMEOUT", None)
DEFAULT_FROM_EMAIL = os.getenv('DEFAULT_FROM_EMAIL')
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Loggers API Notion

LOGGING_NOTION_DB_ID_IPS = os.getenv("LOGGING_NOTION_DB_ID_IPS")
LOGGING_NOTION_SECRET_KEY_IPS = os.getenv("LOGGING_NOTION_SECRET_KEY_IPS")

# Logger replace the print system and print according to
# Avaliable Formats
# BOLD     = '\33[1m'
# ITALIC   = '\33[3m'
# UNDERLINE = '\33[4m'
# BLINK    = '\33[5m'
# BLINK2   = '\33[6m'
# SELECTED = '\33[7m'

# Avaliable colors text
# BLACK  = '\33[30m'
# GREY    = '\33[90m'
# DARK_RED    = '\33[31m'
# DARK_YELLOW = '\33[33m'
# DARK_BLUE   = '\33[34m'
# VIOLET = '\33[35m'
# BEIGE  = '\33[36m'
# WHITE  = '\33[37m'
# PINK = '\033[95m'
# BLUE = '\033[94m'
# CYAN = '\033[96m'
# GREEN = '\033[92m'
# YELLOW = '\033[93m'
# RED = '\033[91m'

# Avaliable colors baackground
# CBLACKBG  = '\33[40m'
# CREDBG    = '\33[41m'
# CGREENBG  = '\33[42m'
# CYELLOWBG = '\33[43m'
# CBLUEBG   = '\33[44m'
# CVIOLETBG = '\33[45m'
# CBEIGEBG  = '\33[46m'
# CWHITEBG  = '\33[47m'

# Always must be End with ENDC
# ENDC = '\033[0m'

DJANGO_GEN_CONSOLE_LOG_LEVEL = os.getenv("DJANGO_GEN_CONSOLE_LOG_LEVEL", "INFO")
DJANGO_SERVER_CONSOLE_LOG_LEVEL = os.getenv("DJANGO_SERVER_CONSOLE_LOG_LEVEL", "ERROR")
DJANGO_REQUEST_CONSOLE_LOG_LEVEL = os.getenv("DJANGO_REQUEST_CONSOLE_LOG_LEVEL", "ERROR")
DJANGO_APPS_CONSOLE_LOG_LEVEL = os.getenv("DJANGO_APPS_CONSOLE_LOG_LEVEL", "INFO")

DJANGO_GEN_FILE_LOG_LEVEL = os.getenv("DJANGO_GEN_FILE_LOG_LEVEL", "ERROR")
DJANGO_SERVER_FILE_LOG_LEVEL = os.getenv("DJANGO_SERVER_FILE_LOG_LEVEL", "ERROR")
DJANGO_DB_FILE_LOG_LEVEL = os.getenv("DJANGO_DB_FILE_LOG_LEVEL", "ERROR")
DJANGO_REQUEST_FILE_LOG_LEVEL = os.getenv("DJANGO_REQUEST_FILE_LOG_LEVEL", "ERROR")
DJANGO_APPS_FILE_LOG_LEVEL = os.getenv("DJANGO_APPS_FILE_LOG_LEVEL", "ERROR")
DJANGO_IPS_FILE_LOG_LEVEL = os.getenv("DJANGO_IPS_FILE_LOG_LEVEL", "ERROR")

DJANGO_GEN_CHAT_LOG_LEVEL = os.getenv("DJANGO_GEN_CHAT_LOG_LEVEL", "ERROR")
DJANGO_SERVER_CHAT_LOG_LEVEL = os.getenv("DJANGO_SERVER_CHAT_LOG_LEVEL", "ERROR")
DJANGO_REQUEST_CHAT_LOG_LEVEL = os.getenv("DJANGO_REQUEST_CHAT_LOG_LEVEL", "ERROR")
DJANGO_APPS_CHAT_LOG_LEVEL = os.getenv("DJANGO_APPS_CHAT_LOG_LEVEL", "ERROR")
DJANGO_IPS_CHAT_LOG_LEVEL = os.getenv("DJANGO_IPS_CHAT_LOG_LEVEL", "ERROR")

DJANGO_IPS_NOTION_LOG_LEVEL = os.getenv("DJANGO_IPS_NOTION_LOG_LEVEL", "ERROR")

# Add middleware for IP tracking
if (
    DJANGO_REQUEST_CONSOLE_LOG_LEVEL == "DEBUG" or
    DJANGO_IPS_FILE_LOG_LEVEL == "DEBUG" or
    DJANGO_IPS_CHAT_LOG_LEVEL == "DEBUG" or
    DJANGO_IPS_NOTION_LOG_LEVEL == "DEBUG"
):
    MIDDLEWARE.insert(0, "core.helpers.get_client_ip.GetIpRequestFrom")

# Celery Configuration Options
CELERY_TIMEZONE = "America/Bogota"
CELERY_TASK_TRACK_STARTED = True
CELERY_TASK_TIME_LIMIT = 30 * 60
CELERY_BROKER_URL = os.getenv("CELERY_BROKER_URL")
CELERY_RESULT_BACKEND = os.getenv("CELERY_RESULT_BACKEND")
CELERY_ACCEPT_CONTENT = ['application/json']
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TASK_SERIALIZER = 'json'

# Withdrawals
WITHDRAWAL_AMOUNT = os.getenv('WITHDRAWAL_AMOUNT')

# Custom vars - account report
MIN_CPA_TRACKER_DAY = int(os.getenv("MIN_CPA_TRACKER_DAY", "5"))

# Custom vars - Expiration adder
EXPIRATION_ADDER_MINUTES = int(os.getenv("EXPIRATION_ADDER_MINUTES", "0"))

# Custom vars - First admin code
FIRST_ADMIN_CODE = os.getenv("FIRST_ADMIN_CODE")

# Custom vars - click period seconds
CLICK_PERIOD_SECONDS = int(os.getenv("CLICK_PERIOD_SECONDS", "600"))

# Custom vars - Yajuego API logging data
API_ACCOUNT_REPORT_YAJUEGO50_KEY = os.getenv("API_ACCOUNT_REPORT_YAJUEGO50_KEY")
API_ACCOUNT_REPORT_YAJUEGO50_ACCOUNT_ID = os.getenv("API_ACCOUNT_REPORT_YAJUEGO50_ACCOUNT_ID")
API_MEMBER_REPORT_YAJUEGO50_KEY = os.getenv("API_MEMBER_REPORT_YAJUEGO50_KEY")
API_MEMBER_REPORT_YAJUEGO50_ACCOUNT_ID = os.getenv("API_MEMBER_REPORT_YAJUEGO50_ACCOUNT_ID")

API_ACCOUNT_REPORT_YAJUEGO80_KEY = os.getenv("API_ACCOUNT_REPORT_YAJUEGO80_KEY")
API_ACCOUNT_REPORT_YAJUEGO80_ACCOUNT_ID = os.getenv("API_ACCOUNT_REPORT_YAJUEGO80_ACCOUNT_ID")
API_MEMBER_REPORT_YAJUEGO80_KEY = os.getenv("API_MEMBER_REPORT_YAJUEGO80_KEY")
API_MEMBER_REPORT_YAJUEGO80_ACCOUNT_ID = os.getenv("API_MEMBER_REPORT_YAJUEGO80_ACCOUNT_ID")

# Custom vars - Sportaza API logging data
API_MEMBER_REPORT_SPORTAZABR_KEY = os.getenv("API_MEMBER_REPORT_SPORTAZABR_KEY")
API_MEMBER_REPORT_SPORTAZABR_ACCOUNT_ID = os.getenv("API_MEMBER_REPORT_SPORTAZABR_ACCOUNT_ID")

# Custom vars - William Hill ESP API logging data
API_MEMBER_REPORT_WILLIAMHILLESP_KEY = os.getenv("API_MEMBER_REPORT_WILLIAMHILLESP_KEY")
API_MEMBER_REPORT_WILLIAMHILLESP_ACCOUNT_ID = os.getenv("API_MEMBER_REPORT_WILLIAMHILLESP_ACCOUNT_ID")
API_MEMBER_REPORT_WILLIAMHILLESP_ACCOUNT_NAME = os.getenv("API_MEMBER_REPORT_WILLIAMHILLESP_ACCOUNT_NAME")

# Custom vars - Betano ESP API logging data
API_MEMBER_REPORT_BETANOPE_KEY = os.getenv("API_MEMBER_REPORT_BETANOPE_KEY")
API_MEMBER_REPORT_BETANOPE_ACCOUNT_ID = os.getenv("API_MEMBER_REPORT_BETANOPE_ACCOUNT_ID")

API_MEMBER_REPORT_BETANOCL_KEY = os.getenv("API_MEMBER_REPORT_BETANOCL_KEY")
API_MEMBER_REPORT_BETANOCL_ACCOUNT_ID = os.getenv("API_MEMBER_REPORT_BETANOCL_ACCOUNT_ID")

# Custom vars - CampeonBet API logging data
API_ACCOUNT_REPORT_CAMPEONBETLATAM_KEY = os.getenv("API_ACCOUNT_REPORT_CAMPEONBETLATAM_KEY")
API_ACCOUNT_REPORT_CAMPEONBETLATAM_ACCOUNT_ID = os.getenv("API_ACCOUNT_REPORT_CAMPEONBETLATAM_ACCOUNT_ID")
API_MEMBER_REPORT_CAMPEONBETLATAM_KEY = os.getenv("API_MEMBER_REPORT_CAMPEONBETLATAM_KEY")
API_MEMBER_REPORT_CAMPEONBETLATAM_ACCOUNT_ID = os.getenv("API_MEMBER_REPORT_CAMPEONBETLATAM_ACCOUNT_ID")

# Customs vars - 888 Sport
API_888SPORT_USERNAME_LATAM = os.getenv("API_888SPORT_USERNAME_LATAM")
API_888SPORT_PASSWORD_LATAM = os.getenv("API_888SPORT_PASSWORD_LATAM")
API_888SPORT_RS_PERCENTAGE_LATAM = float(os.getenv("API_888SPORT_RS_PERCENTAGE_LATAM", "0"))

API_888SPORT_USERNAME_ESP = os.getenv("API_888SPORT_USERNAME_ESP")
API_888SPORT_PASSWORD_ESP = os.getenv("API_888SPORT_PASSWORD_ESP")
API_888SPORT_RS_PERCENTAGE_ESP = float(os.getenv("API_888SPORT_RS_PERCENTAGE_ESP", "0"))

API_888SPORT_USERNAME_BR = os.getenv("API_888SPORT_USERNAME_BR")
API_888SPORT_PASSWORD_BR = os.getenv("API_888SPORT_PASSWORD_BR")
API_888SPORT_RS_PERCENTAGE_BR = float(os.getenv("API_888SPORT_RS_PERCENTAGE_BR", "0"))

API_888SPORT_USERNAME_IT = os.getenv("API_888SPORT_USERNAME_IT")
API_888SPORT_PASSWORD_IT = os.getenv("API_888SPORT_PASSWORD_IT")
API_888SPORT_RS_PERCENTAGE_IT = float(os.getenv("API_888SPORT_RS_PERCENTAGE_IT", "0"))

# Custom vars - Rushbet
API_ACCOUNT_REPORT_RUSHBETCOL_KEY = os.getenv("API_ACCOUNT_REPORT_RUSHBETCOL_KEY")
API_ACCOUNT_REPORT_RUSHBETCOL_ACCOUNT_ID = os.getenv("API_ACCOUNT_REPORT_RUSHBETCOL_ACCOUNT_ID")
API_MEMBER_REPORT_RUSHBETCOL_KEY = os.getenv("API_MEMBER_REPORT_RUSHBETCOL_KEY")
API_MEMBER_REPORT_RUSHBETCOL_ACCOUNT_ID = os.getenv("API_MEMBER_REPORT_RUSHBETCOL_ACCOUNT_ID")


# Custom vars - Strendus

API_MEMBER_REPORT_STRENDUS_KEY = os.getenv("API_MEMBER_REPORT_STRENDUS_KEY")
API_MEMBER_REPORT_STRENDUS_ACCOUNT_ID = os.getenv("API_MEMBER_REPORT_STRENDUS_ACCOUNT_ID")
API_ACCOUNT_REPORT_STRENDUS_KEY = os.getenv("API_ACCOUNT_REPORT_STRENDUS_KEY")
API_ACCOUNT_REPORT_STRENDUS_KEY_ACCOUNT_ID = os.getenv("API_ACCOUNT_REPORT_STRENDUS_KEY_ACCOUNT_ID")

# Custom vars - Betwinner
API_ACCOUNT_REPORT_BETWINNERCOL_ACCESS_KEY = os.getenv("API_ACCOUNT_REPORT_BETWINNERCOL_ACCESS_KEY")
API_ACCOUNT_REPORT_BETWINNERCOL_SECRET_KEY = os.getenv("API_ACCOUNT_REPORT_BETWINNERCOL_SECRET_KEY")
API_MEMBER_REPORT_BETWINNERCOL_ACCESS_KEY = os.getenv("API_MEMBER_REPORT_BETWINNERCOL_ACCESS_KEY")
API_MEMBER_REPORT_BETWINNERCOL_SECRET_KEY = os.getenv("API_MEMBER_REPORT_BETWINNERCOL_SECRET_KEY")

API_ACCOUNT_REPORT_BETWINNERBR_ACCESS_KEY = os.getenv("API_ACCOUNT_REPORT_BETWINNERBR_ACCESS_KEY")
API_ACCOUNT_REPORT_BETWINNERBR_SECRET_KEY = os.getenv("API_ACCOUNT_REPORT_BETWINNERBR_SECRET_KEY")
API_MEMBER_REPORT_BETWINNERBR_ACCESS_KEY = os.getenv("API_MEMBER_REPORT_BETWINNERBR_ACCESS_KEY")
API_MEMBER_REPORT_BETWINNERBR_SECRET_KEY = os.getenv("API_MEMBER_REPORT_BETWINNERBR_SECRET_KEY")

API_ACCOUNT_REPORT_BETWINNERLATAM_ACCESS_KEY = os.getenv("API_ACCOUNT_REPORT_BETWINNERLATAM_ACCESS_KEY")
API_ACCOUNT_REPORT_BETWINNERLATAM_SECRET_KEY = os.getenv("API_ACCOUNT_REPORT_BETWINNERLATAM_SECRET_KEY")
API_MEMBER_REPORT_BETWINNERLATAM_ACCESS_KEY = os.getenv("API_MEMBER_REPORT_BETWINNERLATAM_ACCESS_KEY")
API_MEMBER_REPORT_BETWINNERLATAM_SECRET_KEY = os.getenv("API_MEMBER_REPORT_BETWINNERLATAM_SECRET_KEY")


# Custom vars - Luckia
API_ACC_MEM_REPORT_LUCKIACOL_KEY = os.getenv("API_ACC_MEM_REPORT_LUCKIACOL_KEY")
API_ACCT_MEM_REPORT_LUCKIACOL_RS_PERCENTAGE = float(
    os.getenv("API_ACCT_MEM_REPORT_LUCKIACOL_RS_PERCENTAGE", "0.3")
)

# Custom vars - Dafabet
API_ACC_MEM_REPORT_DAFABET_KEY = os.getenv("API_ACC_MEM_REPORT_DAFABET_KEY")
API_ACCT_MEM_REPORT_DAFABET_RS_PERCENTAGE = float(
    os.getenv("API_ACCT_MEM_REPORT_DAFABET_RS_PERCENTAGE", "0.3")
)

API_ACC_MEM_REPORT_LUCKIAESP_KEY = os.getenv("API_ACC_MEM_REPORT_LUCKIAESP_KEY")
API_ACC_MEM_REPORT_LUCKIAESP_RS_PERCENTAGE = float(
    os.getenv("API_ACC_MEM_REPORT_LUCKIAESP_RS_PERCENTAGE", "0.3")
)

API_LUCKIACOL_RS_PERCENTAGE = float(os.getenv("API_LUCKIACOL_RS_PERCENTAGE", "0.3"))
API_LUCKIAES_RS_PERCENTAGE = float(os.getenv("API_LUCKIAES_RS_PERCENTAGE", "0.3"))

# Custom vars - Rivalo
API_ACCOUNT_MEMBER_REPORT_RIVALO_COL_CLIENT_ID = os.getenv("API_ACCOUNT_MEMBER_REPORT_RIVALO_COL_CLIENT_ID")
API_ACCOUNT_MEMBER_REPORT_RIVALO_COL_CLIENT_SECRET = os.getenv("API_ACCOUNT_MEMBER_REPORT_RIVALO_COL_CLIENT_SECRET")
API_ACCOUNT_MEMBER_REPORT_RIVALO_COL_RS_PERCENTAGE = float(
    os.getenv("API_ACCOUNT_MEMBER_REPORT_RIVALO_COL_RS_PERCENTAGE", "0.3")
)
API_ACCOUNT_MEMBER_REPORT_RIVALO_COL_CHANNEL_ID = os.getenv("API_ACCOUNT_MEMBER_REPORT_RIVALO_COL_CHANNEL_ID")

# Custom vars - Betfair
API_ACC_MEM_REPORT_BETFAIR_COL_KEY = os.getenv("API_ACC_MEM_REPORT_BETFAIR_COL_KEY")
API_ACC_MEM_REPORT_BETFAIR_COL_RS_PERCENTAGE = float(
    os.getenv("API_ACC_MEM_REPORT_BETFAIR_COL_RS_PERCENTAGE", "0.3")
)

API_ACC_MEM_REPORT_BETFAIR_LATAM_KEY = os.getenv("API_ACC_MEM_REPORT_BETFAIR_LATAM_KEY")
API_ACC_MEM_REPORT_BETFAIR_LATAM_RS_PERCENTAGE = float(
    os.getenv("API_ACC_MEM_REPORT_BETFAIR_LATAM_RS_PERCENTAGE", "0.3")
)

API_ACC_MEM_REPORT_BETFAIR_BR_KEY = os.getenv("API_ACC_MEM_REPORT_BETFAIR_BR_KEY")
API_ACC_MEM_REPORT_BETFAIR_BR_RS_PERCENTAGE = float(
    os.getenv("API_ACC_MEM_REPORT_BETFAIR_BR_RS_PERCENTAGE", "0.3")
)

API_ACC_MEM_REPORT_BETFAIR_PE_KEY = os.getenv("API_ACC_MEM_REPORT_BETFAIR_PE_KEY")
API_ACC_MEM_REPORT_BETFAIR_PE_RS_PERCENTAGE = float(
    os.getenv("API_ACC_MEM_REPORT_BETFAIR_PE_RS_PERCENTAGE", "0.3")
)

API_ACC_MEM_REPORT_BETFAIR_MEX_KEY = os.getenv("API_ACC_MEM_REPORT_BETFAIR_MEX_KEY")
API_ACC_MEM_REPORT_BETFAIR_MEX_RS_PERCENTAGE = float(
    os.getenv("API_ACC_MEM_REPORT_BETFAIR_MEX_RS_PERCENTAGE", "0.3")
)

API_ACC_MEM_REPORT_BETFAIR_ESP_KEY = os.getenv("API_ACC_MEM_REPORT_BETFAIR_ESP_KEY")
API_ACC_MEM_REPORT_BETFAIR_ESP_RS_PERCENTAGE = float(
    os.getenv("API_ACC_MEM_REPORT_BETFAIR_ESP_RS_PERCENTAGE", "0.3")
)

API_ACC_MEM_REPORT_BETFAIR_COL_2_KEY = os.getenv("API_ACC_MEM_REPORT_BETFAIR_COL_2_KEY")
API_ACC_MEM_REPORT_BETFAIR_COL_2_RS_PERCENTAGE = float(
    os.getenv("API_ACC_MEM_REPORT_BETFAIR_COL_2_RS_PERCENTAGE", "0.3")
)

API_ACC_MEM_REPORT_BETFAIR_COL_3_KEY = os.getenv("API_ACC_MEM_REPORT_BETFAIR_COL_3_KEY")
API_ACC_MEM_REPORT_BETFAIR_COL_3_RS_PERCENTAGE = float(
    os.getenv("API_ACC_MEM_REPORT_BETFAIR_COL_3_RS_PERCENTAGE", "0.3")
)

API_ACC_MEM_REPORT_BETFAIR_COL_4_KEY = os.getenv("API_ACC_MEM_REPORT_BETFAIR_COL_4_KEY")
API_ACC_MEM_REPORT_BETFAIR_COL_4_RS_PERCENTAGE = float(
    os.getenv("API_ACC_MEM_REPORT_BETFAIR_COL_4_RS_PERCENTAGE", "0.3")
)

# Custom vars - Betwarrior
API_ACC_MEM_REPORT_BETWARRIOR_LATAM_KEY = os.getenv("API_ACC_MEM_REPORT_BETWARRIOR_LATAM_KEY")
API_ACC_MEM_REPORT_BETWARRIOR_LATAM_RS_PERCENTAGE = float(
    os.getenv("API_ACC_MEM_REPORT_BETWARRIOR_LATAM_RS_PERCENTAGE", "0.3")
)
API_ACC_MEM_REPORT_BETWARRIOR_BR_KEY = os.getenv("API_ACC_MEM_REPORT_BETWARRIOR_BR_KEY")
API_ACC_MEM_REPORT_BETWARRIOR_BR_RS_PERCENTAGE = float(
    os.getenv("API_ACC_MEM_REPORT_BETWARRIOR_BR_RS_PERCENTAGE", "0.3")
)
API_ACC_MEM_REPORT_BETWARRIOR_MEX_KEY = os.getenv("API_ACC_MEM_REPORT_BETWARRIOR_MEX_KEY")
API_ACC_MEM_REPORT_BETWARRIOR_MEX_RS_PERCENTAGE = float(
    os.getenv("API_ACC_MEM_REPORT_BETWARRIOR_MEX_RS_PERCENTAGE", "0.3")
)


# Custom vars - OLD RS way
API_BETFAIRCOL_RS_PERCENTAGE = float(os.getenv("API_BETFAIRCOL_RS_PERCENTAGE", "0.3"))
API_BETFAIRLATAM_RS_PERCENTAGE = float(os.getenv("API_BETFAIRLATAM_RS_PERCENTAGE", "0.3"))
API_BETFAIRBR_RS_PERCENTAGE = float(os.getenv("API_BETFAIRBR_RS_PERCENTAGE", "0.3"))
API_BETFAIRPE_RS_PERCENTAGE = float(os.getenv("API_BETFAIRPE_RS_PERCENTAGE", "0.3"))
API_BETFAIRMEX_RS_PERCENTAGE = float(os.getenv("API_BETFAIRMEX_RS_PERCENTAGE", "0.3"))
API_BETFAIRESP_RS_PERCENTAGE = float(os.getenv("API_BETFAIRESP_RS_PERCENTAGE", "0.3"))
API_BETFAIRCOL2_RS_PERCENTAGE = float(os.getenv("API_BETFAIRCOL2_RS_PERCENTAGE", "0.3"))
API_BETFAIRCOL3_RS_PERCENTAGE = float(os.getenv("API_BETFAIRCOL3_RS_PERCENTAGE", "0.3"))
API_BETFAIRCOL4_RS_PERCENTAGE = float(os.getenv("API_BETFAIRCOL4_RS_PERCENTAGE", "0.3"))

# Custom vars - Mozzart
API_MOZZARTCOL_RS_PERCENTAGE = float(os.getenv("API_MOZZARTCOL_RS_PERCENTAGE", "0.35"))

# Custom vars - Ganabet
API_MEMBER_REPORT_GANABETMEX_KEY = os.getenv("API_MEMBER_REPORT_GANABETMEX_KEY")
API_MEMBER_REPORT_GANABETMEX_ACCOUNT_ID = os.getenv("API_MEMBER_REPORT_GANABETMEX_ACCOUNT_ID")

# Custom vars - GaleraBet
API_GALERABET_BR_PASSWORD = os.getenv("API_GALERABET_BR_PASSWORD")
API_GALERABET_BR_USERNAME = os.getenv("API_GALERABET_BR_USERNAME")
API_GALERABET_BR_RS_PERCENTAGE = float(os.getenv("API_GALERABET_BR_RS_PERCENTAGE", "0.3"))

# Custom vars - Betsson
API_ACCOUNT_MEMBER_REPORT_BETSSON_COL_CHANNEL_ID = os.getenv("API_ACCOUNT_MEMBER_REPORT_BETSSON_COL_CHANNEL_ID")
API_ACCOUNT_MEMBER_REPORT_BETSSON_COL_CLIENT_ID = os.getenv("API_ACCOUNT_MEMBER_REPORT_BETSSON_COL_CLIENT_ID")
API_ACCOUNT_MEMBER_REPORT_BETSSON_COL_CLIENT_SECRET = os.getenv("API_ACCOUNT_MEMBER_REPORT_BETSSON_COL_CLIENT_SECRET")
API_ACCOUNT_MEMBER_REPORT_BETSSON_COL_RS_FOR_CPA = float(
    os.getenv("API_ACCOUNT_MEMBER_REPORT_BETSSON_COL_RS_FOR_CPA", "0.0")
)

# Custom vars - Betcris
API_ACCOUNT_MEMBER_REPORT_BETCRIS_LATAM_CHANNEL_ID = os.getenv("API_ACCOUNT_MEMBER_REPORT_BETCRIS_LATAM_CHANNEL_ID")
API_ACCOUNT_MEMBER_REPORT_BETCRIS_LATAM_CLIENT_ID = os.getenv("API_ACCOUNT_MEMBER_REPORT_BETCRIS_LATAM_CLIENT_ID")
API_ACCOUNT_MEMBER_REPORT_BETCRIS_LATAM_CLIENT_SECRET = os.getenv(
    "API_ACCOUNT_MEMBER_REPORT_BETCRIS_LATAM_CLIENT_SECRET"
)
API_ACCOUNT_MEMBER_REPORT_BETCRIS_LATAM_RS_PERCENTAGE = float(
    os.getenv("API_ACCOUNT_MEMBER_REPORT_BETCRIS_LATAM_RS_PERCENTAGE", "0.0")
)

API_ACCOUNT_MEMBER_REPORT_BETCRIS_ECU_CHANNEL_ID = os.getenv("API_ACCOUNT_MEMBER_REPORT_BETCRIS_ECU_CHANNEL_ID")
API_ACCOUNT_MEMBER_REPORT_BETCRIS_ECU_CLIENT_ID = os.getenv("API_ACCOUNT_MEMBER_REPORT_BETCRIS_ECU_CLIENT_ID")
API_ACCOUNT_MEMBER_REPORT_BETCRIS_ECU_CLIENT_SECRET = os.getenv("API_ACCOUNT_MEMBER_REPORT_BETCRIS_ECU_CLIENT_SECRET")
API_ACCOUNT_MEMBER_REPORT_BETCRIS_ECU_RS_PERCENTAGE = float(
    os.getenv("API_ACCOUNT_MEMBER_REPORT_BETCRIS_ECU_RS_PERCENTAGE", "0.0")
)

API_ACCOUNT_MEMBER_REPORT_BETCRIS_MEX_CHANNEL_ID = os.getenv("API_ACCOUNT_MEMBER_REPORT_BETCRIS_MEX_CHANNEL_ID")
API_ACCOUNT_MEMBER_REPORT_BETCRIS_MEX_CLIENT_ID = os.getenv("API_ACCOUNT_MEMBER_REPORT_BETCRIS_MEX_CLIENT_ID")
API_ACCOUNT_MEMBER_REPORT_BETCRIS_MEX_CLIENT_SECRET = os.getenv("API_ACCOUNT_MEMBER_REPORT_BETCRIS_MEX_CLIENT_SECRET")
API_ACCOUNT_MEMBER_REPORT_BETCRIS_MEX_RS_PERCENTAGE = float(
    os.getenv("API_ACCOUNT_MEMBER_REPORT_BETCRIS_MEX_RS_PERCENTAGE", "0.0")
)

# Custom vars - Betmaster
API_ACC_MEM_REPORT_BETMASTER_CHANNEL_ID = os.getenv("API_ACC_MEM_REPORT_BETMASTER_CHANNEL_ID")
API_ACC_MEM_REPORT_BETMASTER_CLIENT_ID = os.getenv("API_ACC_MEM_REPORT_BETMASTER_CLIENT_ID")
API_ACC_MEM_REPORT_BETMASTER_CLIENT_SECRET = os.getenv("API_ACC_MEM_REPORT_BETMASTER_CLIENT_SECRET")
API_ACC_MEM_REPORT_BETMASTER_RS_PERCENTAGE = float(os.getenv("API_ACC_MEM_REPORT_BETMASTER_RS_PERCENTAGE", "0.0"))

# Custom vars - Pixbet
API_MEM_PIXBETBR_KEY = os.getenv("API_MEM_PIXBETBR_KEY")
API_MEM_PIXBETBR_MERCH_ID = os.getenv("API_MEM_PIXBETBR_MERCH_ID")

# Custom vars - Zamba
API_ZAMBA_COL_RS_PERCENTAGE = float(os.getenv("API_ZAMBA_COL_RS_PERCENTAGE", "0.0"))

# Custom vars - TAX FX API
API_KEY_FX = os.getenv("API_KEY_FX")

# HOST REDIRECT ERROR
URL_REDIRECT_CAMPAIGN_ERROR = os.getenv("URL_REDIRECT_CAMPAIGN_ERROR")

# HOST REDIRECT ES
URL_REDIRECT_CAMPAIGN_ES = os.getenv("URL_REDIRECT_CAMPAIGN_ES")

# Others Redirecs
URL_REDIRECT_LANDING = os.getenv("URL_REDIRECT_LANDING")

# Custom vars - People Recruitment RRHH
RECRUITMENT_NOTION_SECRET_KEY = os.getenv("RECRUITMENT_NOTION_SECRET_KEY")
RECRUITMENT_BACKEND_NOTION_DB_ID = os.getenv("RECRUITMENT_BACKEND_NOTION_DB_ID")
RECRUITMENT_UX_NOTION_DB_ID = os.getenv("RECRUITMENT_UX_NOTION_DB_ID")
RECRUITMENT_AFFILIATE_MANAGER_NOTION_DB_ID = os.getenv("RECRUITMENT_AFFILIATE_MANAGER_NOTION_DB_ID")
RECRUITMENT_AFFILIATE_MANAGER_BR_NOTION_DB_ID = os.getenv("RECRUITMENT_AFFILIATE_MANAGER_BR_NOTION_DB_ID")
RECRUITMENT_DATA_ANALYST_DB_ID = os.getenv("RECRUITMENT_DATA_ANALYST_DB_ID")
RECRUITMENT_FRONTEND_NOTION_DB_ID = os.getenv("RECRUITMENT_FRONTEND_NOTION_DB_ID")

# Custom vars - Email for Recruitment
RECRUITMENT_FROM_EMAIL = os.getenv("RECRUITMENT_FROM_EMAIL")
RECRUITMENT_EMAIL_HOST_USER = os.getenv("RECRUITMENT_EMAIL_HOST_USER")
RECRUITMENT_EMAIL_HOST_PASSWORD = os.getenv("RECRUITMENT_EMAIL_HOST_PASSWORD")
RECRUITMENT_EMAIL_USE_TLS = os.getenv("RECRUITMENT_EMAIL_USE_TLS")
RECRUITMENT_EMAIL_PORT = os.getenv("RECRUITMENT_EMAIL_PORT")
RECRUITMENT_EMAIL_HOST = os.getenv("RECRUITMENT_EMAIL_HOST")

LOGO_IMG = os.getenv("LOGO_IMG")
LINKEDIN_URL_IMG = os.getenv("LINKEDIN_URL_IMG")
INSTAGRAM_URL_IMG = os.getenv("INSTAGRAM_URL_IMG")
FACEBOOK_URL_IMG = os.getenv("FACEBOOK_URL_IMG")
TWITTER_URL_IMG = os.getenv("TWITTER_URL_IMG")

# EMAILS VARS
LINKEDIN_URL = os.getenv("LINKEDIN_URL", "")
INSTAGRAM_URL = os.getenv("INSTAGRAM_URL", "")
FACEBOOK_URL = os.getenv("FACEBOOK_URL", "")
TWITTER_URL = os.getenv("TWITTER_URL", "")

# Custom vars - Validation
MAX_VALIDATION_CODE_ATTEMPTS = int(os.getenv("MAX_VALIDATION_CODE_ATTEMPTS"))

VALIDATION_CODE_LENGTH = int(os.getenv("VALIDATION_CODE_LENGTH", "6"))

MAX_CLIC_DAYS = os.getenv("MAX_CLIC_DAYS")

CODE_REGISTER_MAX_CREATED_SECONDS = int(os.getenv("CODE_REGISTER_MAX_CREATED_SECONDS", "3600"))


# Custom vars - MAX CAMPAIGN PARTNER
MAX_CAMPAIGN_PARTNER = 3

# Custom vars - IP LIST
IP_LIST_CALL = os.getenv("IP_LIST_CALL")

# Custom vars - Templates

LOGO_HEADER = os.getenv("LOGO_HEADER")
COMPANY_URL = os.getenv("COMPANY_URL")
TEMPLATE_HEADER_LOGO = os.getenv("TEMPLATE_HEADER_LOGO")
TEMPLATE_FOOTER_LOGO = os.getenv("TEMPLATE_FOOTER_LOGO")
TEMPLATE_IMAGE_INLAZZ = os.getenv("TEMPLATE_IMAGE_INLAZZ")
CUSTOMER_SERVICE_CHAT = os.getenv("CUSTOMER_SERVICE_CHAT")
BETENLACE_LOGIN = os.getenv("BETENLACE_LOGIN")
INLAZE_LOGIN = os.getenv("INLAZE_LOGIN")


# HTTP_400_BAD_REQUEST status Error codes
CERBERUS_ERROR_CODE = 100
CERBERUS_ERROR_CODE_PARAMS = 101
CERBERUS_ERROR_CODE_BODY = 102

SERIALIZER_ERROR_CODE = 200

NOT_FOUND_CODE = 404
CONFLICT_CODE = 409
BAD_REQUEST_CODE = 400

BANNED_USER_CODE = 903
INACTIVE_USER_CODE = 904
MISSING_FILES_CODE = 905
PARTNER_DOCUMENTS_DO_NOT_EXIST = 906
ERROR_SAVING_PARTNER_DOCUMENTS = 907
BAD_FILES_INTEGRITY = 908
ILOGICAL_ACTION = 909
ERROR_SENDING_EMAIL = 910
CELERY_INTERNAL_ERROR = 911
PASSWORD_DOES_NOT_MATCH = 912
USER_ALREADY_EXIST = 913
MAX_ATTEMPTS_REACHED = 914
EXPIRED_VALIDATION_CODE = 915
ERROR_SAVING_COMPANY_LOGO = 916
CURRENT_USER_SESSION_MISSING = 917

ERROR_CODE_BAD_CSV = 918
ERROR_CODE_BAD_PROCEDURE_DF = 919

ERROR_FX_NOT_IN_DB = 920
ERROR_CAMPAIGN_NOT_IN_DB = 921

CODE_REGISTER_PK_NOT_FOUND = 922
CODE_REGISTER_IS_USED = 923

ERROR_UNDEFINED = 0

INVALID_TOKEN = 924
# HTTP_404_NOT_FOUND status Error codes
RELATION_MISSING_404 = 100

# Forbidden

FORBIDDEN = 403
FORBIDDEN_SESSION = 101
FORBIDDEN_PERMISSION = 102
FORBIDDEN_NOT_ALLOWED = 103
FORBIDDEN_NOT_TERMS = 104

INTERNAL_SERVER_ERROR = 500

# Twilio error codes
TWILIO_ERROR_CODE_INVALID_TO_PHONE = int(os.getenv("TWILIO_ERROR_CODE_INVALID_TO_PHONE", "0"))
TWILIO_CREDENTIALS_MSG = "Credentials are required to create a TwilioClient"

# These two values need to meet the requirement of same digits amount
MIN_DIGITS = os.getenv("MIN_DIGITS")
MAX_DIGITS = os.getenv("MAX_DIGITS")


TWILIO_ACCOUNT_SID = os.getenv("TWILIO_ACCOUNT_SID")
TWILIO_AUTH_TOKEN = os.getenv("TWILIO_AUTH_TOKEN")
TWILIO_BASE_NUMBER = os.getenv("TWILIO_BASE_NUMBER")
TWILIO_BASE_NUMBER_WHATSAPP = os.getenv("TWILIO_BASE_NUMBER_WHATSAPP")
SENDGRID_CUSTOM_FIELD_CAMPAIGN = os.getenv("SENDGRID_CUSTOM_FIELD_CAMPAIGN")
SENDGRID_CUSTOM_FIELD_NOTICE = os.getenv("SENDGRID_CUSTOM_FIELD_NOTICE")

DOMAIN_EMAIL = "inlazz.com"


# Default partner creation data
ADVISER_ID_LINKED_DEFAULT = int(os.getenv("ADVISER_ID_LINKED_DEFAULT", "1"))
BANK_ACCOUNTS_LIMIT = int(os.getenv("BANK_ACCOUNTS_LIMIT", "4"))
MAX_SOCIAL_CHANNEL = int(os.getenv("MAX_SOCIAL_CHANNEL", "10"))


# ADS control Redirect bots
REG_BOT = re.compile(
    '(bot|spider|Bot|Spider|crawler|Crawler|slurp|externalhit|Ads|Inspect|python|curl|AdWords)',
    re.IGNORECASE
)

WEBHOOK_REDIRECT_BOT = os.getenv("WEBHOOK_REDIRECT_BOT")
REDIRECT_FERNET_KEY = (os.getenv("REDIRECT_FERNET_KEY"))
